require 'spec_helper'

describe ShowsController do

  describe "GET new" do
    context "Authorized user" do
      #login_user

      before :each do
        @show = Show.new
        get :new
      end

      it "assigns a new show as @show" do
        expect(assigns(:show)).to be_a_new(Show)
      end

      it "renders the new show template" do
        expect(response).to render_template :new
      end
    end

    context "Random joe" do
      it "prevents the random joe from accessing the new show template" do
        get :new
        expect(response.status).to eq 302
      end

      it "redirects the random joe to the login page" do
        get :new
        expect(response).to redirect_to new_user_session_path
      end
    end
  end

  describe "POST create" do
    context "Authorized user" do
      login_user

      it "creates a new show" do
        expect {
          create :show
        }.to change(Show, :count).by 1
      end

      it "assigns a newly created show as @show" do
        post :create, { :show => attributes_for(:show) }
        expect(assigns(:show)).to be_a(Show)
        expect(assigns(:show)).to be_persisted
      end

      it "redirects to the shows_path" do
        post :create, { :show => attributes_for(:show) }
        expect(response).to redirect_to shows_path
      end

      context "invalid params" do

        before :each do
          Show.any_instance.stub(:save).and_return false
          post :create, { :show => { date: "invalid value" } }
        end

        it "assigns a newly created but unsaved show as @show" do
          expect(assigns(:show)).to be_a_new(Show)
        end

        it "re-renders the new template" do
          expect(response).to render_template("new")
        end
      end
    end

    context "Random joe" do
      it "prevents the random joe from creating shows" do
        post :create, { :show => attributes_for(:show) }
        expect(assigns(:show)).to be_nil
      end

      it "redirects the random joe to the login page" do
        post :create, { :show => attributes_for(:show) }
        expect(response).to redirect_to new_user_session_path
      end
    end
  end

  describe "GET edit" do
    context "Authorized user" do
      login_user

      before :each do
        @show = create :show
        get :edit, { id: @show.id }
      end

      it "assigns the requested show as @show" do
        expect(assigns(:show)).to eq(@show)
      end

      it "renders the :edit template" do
        expect(response).to render_template :edit
      end
    end

    context "Random joe" do
      before :each do
        @show = create :show
        get :edit, { id: @show.id }
      end

      it "prevents random joe from editing show" do
        expect(assigns(:show)).to be_nil
      end

      it "redirects random to login page" do
        expect(response).to redirect_to new_user_session_path
      end
    end
  end

  describe "PUT update" do
    context "Authorized user" do
      login_user

      before :each do
        @show = create :show
      end

      it "updates the requested show" do
        expect_any_instance_of(Show).to receive(:update)
        put :update, { id: @show.id, show: { date: Date.today } }
      end

      it "assigns the request show as @show" do
        put :update, { id: @show.id, show: attributes_for(:show)  }
        expect(assigns(:show)).to eq @show
      end

      it "redirects_to shows_path" do
        put :update, { id: @show.id, show: attributes_for(:show) }
        expect(response).to redirect_to shows_path
      end
    end
  end

  describe "DELETE destroy" do
    context "Authorized user" do
      login_user

      before :each do
        @show = create :show
      end

      it "deletes the requested show" do
        expect {
          delete :destroy, { id: @show.id }
        }.to change(Show, :count).by -1
      end

      it "redirects to the shows path" do
        delete :destroy, { id: @show.id }
        expect(response).to redirect_to shows_path
      end
    end

    context "Random joe" do
      it "prevents the random joe from deleting shows" do
        show = create :show
        delete :destroy, { id: show.id }
        expect(response).to redirect_to new_user_session_path
      end
    end
  end
  describe "shows routing" do
    it "routes to #new" do
      expect(:get => 'shows/new').to route_to(:controller => "shows", :action => "new")
    end

    it "routes to #edit" do
      expect(:get => 'shows/1/edit').to route_to(:controller => "shows", :action => "edit", :id => "1")
    end

    it "routes to #destroy" do
      expect(:delete => 'shows/1').to route_to(:controller => "shows", :action => "destroy", :id => "1")
    end

    it "routes to #update" do
      expect(:put => 'shows/1').to route_to(:controller => "shows", :action => "update", :id => "1")
    end

    it "routes to #create" do
      expect(:post => 'shows').to route_to(:controller => "shows", :action => "create")
    end

    it "does not route to #index" do
      expect(:get => 'shows').to_not route_to(:controller => "shows", :action => "index")
    end

    it "does not route to #show" do
      expect(:get => 'shows/1').to_not route_to(:controller => "shows", :action => "show", :id => "1")
    end
  end
end
